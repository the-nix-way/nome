# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.6)
{
  description = "Nome: my Nix home";

  inputs = {
    determinate = {
      url = "https://flakehub.com/f/DeterminateSystems/determinate/3";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    dev-templates = {
      url = "https://flakehub.com/f/the-nix-way/dev-templates/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    easy-template = {
      url = "https://flakehub.com/f/DeterminateSystems/easy-template/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    fenix = {
      url = "https://flakehub.com/f/nix-community/fenix/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    fh = {
      url = "https://flakehub.com/f/DeterminateSystems/fh/0.1";
    };
    flake-checker = {
      url = "https://flakehub.com/f/DeterminateSystems/flake-checker/0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    flake-iter = {
      url = "https://flakehub.com/f/DeterminateSystems/flake-iter/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/0.1";
    git-hooks = {
      url = "https://flakehub.com/f/cachix/git-hooks.nix/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    helix = {
      url = "https://flakehub.com/f/helix-editor/helix/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    home-manager = {
      url = "https://flakehub.com/f/nix-community/home-manager/0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nh = {
      url = "https://flakehub.com/f/nix-community/nh/4.2.0-beta2";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-darwin = {
      url = "https://flakehub.com/f/nix-darwin/nix-darwin/0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0";
    nixpkgs-unstable.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1";
    nuenv = {
      url = "https://flakehub.com/f/DeterminateSystems/nuenv/0.1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    { self, ... }@inputs:
    let
      supportedSystems = [ "aarch64-darwin" ];
      forEachSupportedSystem =
        f:
        inputs.nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import inputs.nixpkgs {
              inherit system;
              overlays = [ self.overlays.default ];
            };
            inherit system;
          }
        );

      stateVersion = "25.05";
      system = "aarch64-darwin";
      username = "lucperkins";
    in
    {
      inherit (inputs.flake-schemas) schemas;

      formatter = forEachSupportedSystem ({ pkgs, ... }: pkgs.nixfmt-rfc-style);

      checks = forEachSupportedSystem (
        { pkgs, ... }:
        {
          inherit (pkgs) pre-commit-checks;
        }
      );

      devShells = forEachSupportedSystem (
        {
          pkgs,
          system,
        }:
        {
          default = pkgs.mkShellNoCC {
            name = "nome";
            packages =
              (with pkgs; [
                reload
              ])
              ++ self.checks.${system}.pre-commit-checks.enabledPackages;
            inherit (self.checks.${system}.pre-commit-checks) shellHook;
          };
        }
      );

      overlays.default = final: prev: {
        inherit (prev.stdenv.hostPlatform) system;

        pre-commit-checks = inputs.git-hooks.lib.${system}.run {
          src = builtins.path {
            name = "root";
            path = ./.;
          };
          hooks = {
            editorconfig-checker.enable = true;
            nixfmt-rfc-style.enable = true;
            statix.enable = true;
          };
        };

        reload =
          let
            darwin-rebuild = inputs.nixpkgs.lib.getExe inputs.nix-darwin.packages.${system}.darwin-rebuild;
            zsh = inputs.nixpkgs.lib.getExe final.zsh;
            zshrc = "${final.lib.homeDirectory}/.zshrc";
          in
          final.writeShellApplication {
            name = "reload";
            runtimeInputs = with final; [
              darwin-rebuild
              zsh
            ];
            text = ''
              if [[ -f "/etc/nix/nix.custom.conf" ]]; then
                echo "> Making backup of custom Nix config"
                sudo cp /etc/nix/nix.custom.conf /etc/nix/nix.custom.conf.before-nix-darwin
              fi

              if [[ -f "/etc/nix/flake-registry.json" ]]; then
                echo "> Making backup of custom Nix flake registry"
                sudo cp /etc/nix/flake-registry.json /etc/nix/flake-registry.json.before-nix-darwin
              fi

              echo "> Running darwin-rebuild switch..."
              sudo darwin-rebuild switch --flake .
              echo "> darwin-rebuild switch was successful âœ…"
              echo "> Refreshing zshrc..."
              zsh -c "source ${zshrc}"
              echo "> zshrc was refreshed successfully âœ…"
              echo "> macOS config was successfully applied ðŸš€"
            '';
          };

        rustToolchain =
          with inputs.fenix.packages.${system};
          combine (
            with stable;
            [
              clippy
              rustc
              cargo
              rustfmt
              rust-src
              rust-std
            ]
          );

        # Constant values to pass around
        constants = { inherit username system; };

        # Extra lib functions
        lib = prev.lib // {
          homeDirectory = if prev.stdenv.isDarwin then "/Users/${username}" else "/home/${username}";
        };

        # Centralize theme stuff here
        fonts = {
          packages = with final; [ jetbrains-mono ];

          vscode = {
            main = "Jetbrains Mono";
            terminal = "Jetbrains Mono";
          };
        };

        flake-registry-file = "nix/flake-registry.json";

        themes = {
          bat = "Catppuccin Mocha";
          ghostty = "Catppuccin Mocha";
          helix = "catppuccin_mocha";
          spotify-player = "catppuccin-mocha";
          vscode = {
            icon = "catppuccin-mocha";
            light = "Catppuccin Latte";
            dark = "Catppuccin Mocha";
          };
          zellij = "catppuccin-mocha";
        };

        # Packages

        inherit (inputs.dev-templates.packages.${system}) dvt;
        easy-template = inputs.easy-template.packages.${system}.default;
        fh = inputs.fh.packages.${system}.default;
        flake-checker = inputs.flake-checker.packages.${system}.default;
        flake-iter = inputs.flake-iter.packages.${system}.default;
        helix = inputs.helix.packages.${system}.default;
        inherit (inputs.nixpkgs-unstable.legacyPackages.${system}) jujutsu;
        nh = inputs.nh.packages.${system}.default;
        inherit (inputs.nixpkgs-unstable.legacyPackages.${system}) nushell;
        inherit (inputs.nixpkgs-unstable.legacyPackages.${system}) zed-editor;

        unstable = with inputs.nixpkgs-unstable.legacyPackages.${system}; [
          hugo
          jjui
        ];
      };

      darwinConfigurations."${username}-${system}" = inputs.nix-darwin.lib.darwinSystem {
        inherit system;
        modules = [
          self.darwinModules.base
          inputs.determinate.darwinModules.default
          inputs.home-manager.darwinModules.home-manager
          self.darwinModules.home-manager
        ];
      };

      darwinModules = {
        base =
          { pkgs, ... }:
          import ./nix-darwin/base {
            inherit pkgs;
            overlays = [
              inputs.nuenv.overlays.default
              self.overlays.default
            ];
          };

        home-manager = { pkgs, ... }: import ./home-manager { inherit pkgs stateVersion username; };
      };

      templates = import ./templates;
    };
}
